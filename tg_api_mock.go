// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"github.com/gotd/td/tg"
	"sync"
)

// Ensure, that tgAPIInterfaceMock does implement tgAPIInterface.
// If this is not the case, regenerate this file with moq.
var _ tgAPIInterface = &tgAPIInterfaceMock{}

// tgAPIInterfaceMock is a mock implementation of tgAPIInterface.
//
//	func TestSomethingThatUsestgAPIInterface(t *testing.T) {
//
//		// make and configure a mocked tgAPIInterface
//		mockedtgAPIInterface := &tgAPIInterfaceMock{
//			ChannelsDeleteParticipantHistoryFunc: func(ctx context.Context, request *tg.ChannelsDeleteParticipantHistoryRequest) (*tg.MessagesAffectedHistory, error) {
//				panic("mock out the ChannelsDeleteParticipantHistory method")
//			},
//			ChannelsEditBannedFunc: func(ctx context.Context, request *tg.ChannelsEditBannedRequest) (tg.UpdatesClass, error) {
//				panic("mock out the ChannelsEditBanned method")
//			},
//			ChannelsGetChannelsFunc: func(ctx context.Context, id []tg.InputChannelClass) (tg.MessagesChatsClass, error) {
//				panic("mock out the ChannelsGetChannels method")
//			},
//			ChannelsGetParticipantsFunc: func(ctx context.Context, t *tg.ChannelsGetParticipantsRequest) (tg.ChannelsChannelParticipantsClass, error) {
//				panic("mock out the ChannelsGetParticipants method")
//			},
//			MessagesSearchFunc: func(ctx context.Context, t *tg.MessagesSearchRequest) (tg.MessagesMessagesClass, error) {
//				panic("mock out the MessagesSearch method")
//			},
//		}
//
//		// use mockedtgAPIInterface in code that requires tgAPIInterface
//		// and then make assertions.
//
//	}
type tgAPIInterfaceMock struct {
	// ChannelsDeleteParticipantHistoryFunc mocks the ChannelsDeleteParticipantHistory method.
	ChannelsDeleteParticipantHistoryFunc func(ctx context.Context, request *tg.ChannelsDeleteParticipantHistoryRequest) (*tg.MessagesAffectedHistory, error)

	// ChannelsEditBannedFunc mocks the ChannelsEditBanned method.
	ChannelsEditBannedFunc func(ctx context.Context, request *tg.ChannelsEditBannedRequest) (tg.UpdatesClass, error)

	// ChannelsGetChannelsFunc mocks the ChannelsGetChannels method.
	ChannelsGetChannelsFunc func(ctx context.Context, id []tg.InputChannelClass) (tg.MessagesChatsClass, error)

	// ChannelsGetParticipantsFunc mocks the ChannelsGetParticipants method.
	ChannelsGetParticipantsFunc func(ctx context.Context, t *tg.ChannelsGetParticipantsRequest) (tg.ChannelsChannelParticipantsClass, error)

	// MessagesSearchFunc mocks the MessagesSearch method.
	MessagesSearchFunc func(ctx context.Context, t *tg.MessagesSearchRequest) (tg.MessagesMessagesClass, error)

	// calls tracks calls to the methods.
	calls struct {
		// ChannelsDeleteParticipantHistory holds details about calls to the ChannelsDeleteParticipantHistory method.
		ChannelsDeleteParticipantHistory []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *tg.ChannelsDeleteParticipantHistoryRequest
		}
		// ChannelsEditBanned holds details about calls to the ChannelsEditBanned method.
		ChannelsEditBanned []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Request is the request argument value.
			Request *tg.ChannelsEditBannedRequest
		}
		// ChannelsGetChannels holds details about calls to the ChannelsGetChannels method.
		ChannelsGetChannels []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID []tg.InputChannelClass
		}
		// ChannelsGetParticipants holds details about calls to the ChannelsGetParticipants method.
		ChannelsGetParticipants []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T *tg.ChannelsGetParticipantsRequest
		}
		// MessagesSearch holds details about calls to the MessagesSearch method.
		MessagesSearch []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// T is the t argument value.
			T *tg.MessagesSearchRequest
		}
	}
	lockChannelsDeleteParticipantHistory sync.RWMutex
	lockChannelsEditBanned               sync.RWMutex
	lockChannelsGetChannels              sync.RWMutex
	lockChannelsGetParticipants          sync.RWMutex
	lockMessagesSearch                   sync.RWMutex
}

// ChannelsDeleteParticipantHistory calls ChannelsDeleteParticipantHistoryFunc.
func (mock *tgAPIInterfaceMock) ChannelsDeleteParticipantHistory(ctx context.Context, request *tg.ChannelsDeleteParticipantHistoryRequest) (*tg.MessagesAffectedHistory, error) {
	if mock.ChannelsDeleteParticipantHistoryFunc == nil {
		panic("tgAPIInterfaceMock.ChannelsDeleteParticipantHistoryFunc: method is nil but tgAPIInterface.ChannelsDeleteParticipantHistory was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *tg.ChannelsDeleteParticipantHistoryRequest
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockChannelsDeleteParticipantHistory.Lock()
	mock.calls.ChannelsDeleteParticipantHistory = append(mock.calls.ChannelsDeleteParticipantHistory, callInfo)
	mock.lockChannelsDeleteParticipantHistory.Unlock()
	return mock.ChannelsDeleteParticipantHistoryFunc(ctx, request)
}

// ChannelsDeleteParticipantHistoryCalls gets all the calls that were made to ChannelsDeleteParticipantHistory.
// Check the length with:
//
//	len(mockedtgAPIInterface.ChannelsDeleteParticipantHistoryCalls())
func (mock *tgAPIInterfaceMock) ChannelsDeleteParticipantHistoryCalls() []struct {
	Ctx     context.Context
	Request *tg.ChannelsDeleteParticipantHistoryRequest
} {
	var calls []struct {
		Ctx     context.Context
		Request *tg.ChannelsDeleteParticipantHistoryRequest
	}
	mock.lockChannelsDeleteParticipantHistory.RLock()
	calls = mock.calls.ChannelsDeleteParticipantHistory
	mock.lockChannelsDeleteParticipantHistory.RUnlock()
	return calls
}

// ChannelsEditBanned calls ChannelsEditBannedFunc.
func (mock *tgAPIInterfaceMock) ChannelsEditBanned(ctx context.Context, request *tg.ChannelsEditBannedRequest) (tg.UpdatesClass, error) {
	if mock.ChannelsEditBannedFunc == nil {
		panic("tgAPIInterfaceMock.ChannelsEditBannedFunc: method is nil but tgAPIInterface.ChannelsEditBanned was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Request *tg.ChannelsEditBannedRequest
	}{
		Ctx:     ctx,
		Request: request,
	}
	mock.lockChannelsEditBanned.Lock()
	mock.calls.ChannelsEditBanned = append(mock.calls.ChannelsEditBanned, callInfo)
	mock.lockChannelsEditBanned.Unlock()
	return mock.ChannelsEditBannedFunc(ctx, request)
}

// ChannelsEditBannedCalls gets all the calls that were made to ChannelsEditBanned.
// Check the length with:
//
//	len(mockedtgAPIInterface.ChannelsEditBannedCalls())
func (mock *tgAPIInterfaceMock) ChannelsEditBannedCalls() []struct {
	Ctx     context.Context
	Request *tg.ChannelsEditBannedRequest
} {
	var calls []struct {
		Ctx     context.Context
		Request *tg.ChannelsEditBannedRequest
	}
	mock.lockChannelsEditBanned.RLock()
	calls = mock.calls.ChannelsEditBanned
	mock.lockChannelsEditBanned.RUnlock()
	return calls
}

// ChannelsGetChannels calls ChannelsGetChannelsFunc.
func (mock *tgAPIInterfaceMock) ChannelsGetChannels(ctx context.Context, id []tg.InputChannelClass) (tg.MessagesChatsClass, error) {
	if mock.ChannelsGetChannelsFunc == nil {
		panic("tgAPIInterfaceMock.ChannelsGetChannelsFunc: method is nil but tgAPIInterface.ChannelsGetChannels was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  []tg.InputChannelClass
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockChannelsGetChannels.Lock()
	mock.calls.ChannelsGetChannels = append(mock.calls.ChannelsGetChannels, callInfo)
	mock.lockChannelsGetChannels.Unlock()
	return mock.ChannelsGetChannelsFunc(ctx, id)
}

// ChannelsGetChannelsCalls gets all the calls that were made to ChannelsGetChannels.
// Check the length with:
//
//	len(mockedtgAPIInterface.ChannelsGetChannelsCalls())
func (mock *tgAPIInterfaceMock) ChannelsGetChannelsCalls() []struct {
	Ctx context.Context
	ID  []tg.InputChannelClass
} {
	var calls []struct {
		Ctx context.Context
		ID  []tg.InputChannelClass
	}
	mock.lockChannelsGetChannels.RLock()
	calls = mock.calls.ChannelsGetChannels
	mock.lockChannelsGetChannels.RUnlock()
	return calls
}

// ChannelsGetParticipants calls ChannelsGetParticipantsFunc.
func (mock *tgAPIInterfaceMock) ChannelsGetParticipants(ctx context.Context, t *tg.ChannelsGetParticipantsRequest) (tg.ChannelsChannelParticipantsClass, error) {
	if mock.ChannelsGetParticipantsFunc == nil {
		panic("tgAPIInterfaceMock.ChannelsGetParticipantsFunc: method is nil but tgAPIInterface.ChannelsGetParticipants was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   *tg.ChannelsGetParticipantsRequest
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockChannelsGetParticipants.Lock()
	mock.calls.ChannelsGetParticipants = append(mock.calls.ChannelsGetParticipants, callInfo)
	mock.lockChannelsGetParticipants.Unlock()
	return mock.ChannelsGetParticipantsFunc(ctx, t)
}

// ChannelsGetParticipantsCalls gets all the calls that were made to ChannelsGetParticipants.
// Check the length with:
//
//	len(mockedtgAPIInterface.ChannelsGetParticipantsCalls())
func (mock *tgAPIInterfaceMock) ChannelsGetParticipantsCalls() []struct {
	Ctx context.Context
	T   *tg.ChannelsGetParticipantsRequest
} {
	var calls []struct {
		Ctx context.Context
		T   *tg.ChannelsGetParticipantsRequest
	}
	mock.lockChannelsGetParticipants.RLock()
	calls = mock.calls.ChannelsGetParticipants
	mock.lockChannelsGetParticipants.RUnlock()
	return calls
}

// MessagesSearch calls MessagesSearchFunc.
func (mock *tgAPIInterfaceMock) MessagesSearch(ctx context.Context, t *tg.MessagesSearchRequest) (tg.MessagesMessagesClass, error) {
	if mock.MessagesSearchFunc == nil {
		panic("tgAPIInterfaceMock.MessagesSearchFunc: method is nil but tgAPIInterface.MessagesSearch was just called")
	}
	callInfo := struct {
		Ctx context.Context
		T   *tg.MessagesSearchRequest
	}{
		Ctx: ctx,
		T:   t,
	}
	mock.lockMessagesSearch.Lock()
	mock.calls.MessagesSearch = append(mock.calls.MessagesSearch, callInfo)
	mock.lockMessagesSearch.Unlock()
	return mock.MessagesSearchFunc(ctx, t)
}

// MessagesSearchCalls gets all the calls that were made to MessagesSearch.
// Check the length with:
//
//	len(mockedtgAPIInterface.MessagesSearchCalls())
func (mock *tgAPIInterfaceMock) MessagesSearchCalls() []struct {
	Ctx context.Context
	T   *tg.MessagesSearchRequest
} {
	var calls []struct {
		Ctx context.Context
		T   *tg.MessagesSearchRequest
	}
	mock.lockMessagesSearch.RLock()
	calls = mock.calls.MessagesSearch
	mock.lockMessagesSearch.RUnlock()
	return calls
}
